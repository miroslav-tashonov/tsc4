{-
 TASK 5 - Fibonacci sequence
 Implement a function that generates the Fibonacci
 sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
 The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
 and the rest are defined as F_n = F_(n-1) + F_(n-2).
 The resulting Fibonacci sequence should be stored in a tuple.
 For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
 and a request with N = 201 and K = 4 should return a tuple
 [453973694165307953197296969697410619233826,
 734544867157818093234908902110449296423351,
 1188518561323126046432205871807859915657177,
 1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int) findNthFibonacciNumber(int n) impure inline {
  if (n == 0){
   return (0, 1);
  }

  (int first_number, int second_number) = findNthFibonacciNumber(n / 2);
  int uno_result = first_number * ( second_number * 2 - first_number);
  int duo_result =  first_number * first_number + second_number * second_number;

  if(n % 2 == 0){
			return (uno_result, duo_result);
  }
  else {
    return (duo_result, uno_result + duo_result);
  }
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  var fiboonacci_tuple = empty_tuple();
  if(k == 0){
    return  fiboonacci_tuple;
  }

  if(k > 255){
    return  fiboonacci_tuple;
  }

  if(n > 370){
    return  fiboonacci_tuple;
  }

  if(n + k > 370){
    return  fiboonacci_tuple;
  }

  int iteration = 0;
  repeat(k) {
     (int fibonacciNumber, _) = findNthFibonacciNumber(n + iteration);
     fiboonacci_tuple~tpush(fibonacciNumber);

     iteration += 1;
  }
  
 return  fiboonacci_tuple;
}