{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  tuple deTuple = unsafe_tuple([]);
  Fibonacci(n + k, n + k, n, deTuple);
  return deTuple;
}

int Fibonacci(int n, int final_number, int k, tuple deTuple)
{
    if (n == 0){
      return 0;
    }
    else if (n == 1){
      return 1;
    }
    else
    {
        int number = Fibonacci(n - 1, final_number, k, deTuple) + Fibonacci(n - 2, final_number, k, deTuple)
        if(n >= final_number - k)
        {
          deTuple~tpush(number);
        }

        return number;
    }
}

