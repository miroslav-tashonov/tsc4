{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
    if(tree.is_null())
    {
      return begin_cell().end_cell();
    }

    tuple stack = null();
    ;; bring the main cell into the stack to process it in the loop
    stack~push_back(tree);
    ;; do it until stack is not null
    while (~ stack.is_null()) {
        ;; get the cell from the stack and convert it to a slice to be able to process it
        cell root_cell = stack~pop_back();
        slice s = root_cell.begin_parse();

        ;; do something with s data

        ;; if the current slice has any refs, add them to stack
        repeat (s.slice_refs()) {
            cell toCompare = s~load_ref();
            if(toCompare.cell_hash() == hash)
            {
              return root_cell;
            }
            stack~push_back(s~load_ref());
        }
    }

    return begin_cell().end_cell();
}