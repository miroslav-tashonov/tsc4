{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> int is_null (X x) asm "ISNULL";
int tlen(tuple t) asm "TLEN";

() recv_internal() {
}


(builder) encode_string_to_int(slice text, int shift, builder chars) impure inline {
  while (~ text.slice_data_empty?()) {
      int char = text~load_uint(8);
      if(char >= 65)
      {
        if(char <= 90)
        {
          if(90 - char < shift)
          {
            chars~store_uint(64 + (shift - (90 - char)), 8); 
          }
          else
          {
            chars~store_uint(char + shift, 8);
          }
        }
        elseif(char >= 97)
        {
          if(char <= 122)
          {
            if(122 - char < shift)
            {
              chars~store_uint(96 + (shift - (122 - char)), 8); 
            }
            else
            {
              chars~store_uint(char + shift, 8); 
            }
          }
          else
          {
            chars~store_uint(char, 8);
          }
        }
        else
        {
          chars~store_uint(char, 8);
        }
      }
      else
      {
        chars~store_uint(char, 8);
      }
  }

  return chars;
}

(builder) decode_string(slice text, int shift, builder chars) impure inline {
  while (~ text.slice_data_empty?()) {
      int char = text~load_uint(8);
      if(char >= 65)
      {
        if(char <= 90)
        {
          if(char - 65 < shift)
          {
            chars~store_uint(91 - (shift - (char - 65)), 8); 
          }
          else
          {
            chars~store_uint(char - shift, 8);
          }
        }
        elseif(char >= 97)
        {
          if(char <= 122)
          {
            if(char - 97 < shift)
            {
              chars~store_uint(123 - (shift - (char - 97)), 8); 
            }
            else
            {
              chars~store_uint(char - shift, 8);
            }
          }
          else
          {
            chars~store_uint(char, 8);
          }
        }
        else
        {
          chars~store_uint(char, 8);
        }
      }
      else
      {
        chars~store_uint(char, 8);
      }
  }

  return chars;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  if(text.is_null())
  {
    return begin_cell().end_cell();
  }

  slice s = text.begin_parse();
  int op = s~load_uint(32);
  throw_unless(212, op == 0);
  shift = shift % 26;
  
  builder chars = begin_cell();
  chars~store_uint(0, 32);
  chars = encode_string_to_int(s, shift, chars);

  int numberOfRefs = s.slice_refs();
  tuple refs = empty_tuple();

  while (numberOfRefs > 0) {
    cell toCompare = s~load_ref();
    slice aaa = toCompare.begin_parse();
    numberOfRefs = aaa.slice_refs();
    builder c = encode_string_to_int(aaa, shift, begin_cell());
    refs~tpush(c);
    
    s = aaa;
  }

   int len = refs.tlen();
  if(len > 0)
  {
    int i = len - 1;
    builder x = refs.at(i);
    cell tempCell = begin_cell().store_builder(x).end_cell();
    i -= 1;
    while (i >= 0) {
        x = refs.at(i);
        var dadaCell = begin_cell().store_builder(x).store_ref(tempCell).end_cell();
        tempCell = dadaCell;

        i = i - 1;
    }

    chars = chars.store_ref(tempCell);
  }

  return chars.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  if(text.is_null())
  {
    return begin_cell().end_cell();
  }

  slice s = text.begin_parse();
  int op = s~load_uint(32);
  throw_unless(212, op == 0);
  shift = shift % 26;
  builder chars = begin_cell();
  chars~store_uint(0, 32);
  chars = decode_string(s, shift, chars);

  int numberOfRefs = s.slice_refs();
  tuple refs = empty_tuple();

  while (numberOfRefs > 0) {
    cell toCompare = s~load_ref();
    slice aaa = toCompare.begin_parse();
    numberOfRefs = aaa.slice_refs();
    builder c = decode_string(aaa, shift, begin_cell());
    refs~tpush(c);
    
    s = aaa;
  }
   

   int len = refs.tlen();
  if(len > 0)
  {
    int i = len - 1;
    builder x = refs.at(i);
    cell tempCell = begin_cell().store_builder(x).end_cell();
    i -= 1;
    while (i >= 0) {
        x = refs.at(i);
        var dadaCell = begin_cell().store_builder(x).store_ref(tempCell).end_cell();
        tempCell = dadaCell;

        i = i - 1;
    }

    chars = chars.store_ref(tempCell);
  }

  return chars.end_cell();
}